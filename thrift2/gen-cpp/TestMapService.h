/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TestMapService_H
#define TestMapService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "test_map_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TestMapServiceIf {
 public:
  virtual ~TestMapServiceIf() {}
  virtual void pushData(const int64_t reqId, const std::map<int64_t, std::string> & pushData) = 0;
};

class TestMapServiceIfFactory {
 public:
  typedef TestMapServiceIf Handler;

  virtual ~TestMapServiceIfFactory() {}

  virtual TestMapServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TestMapServiceIf* /* handler */) = 0;
};

class TestMapServiceIfSingletonFactory : virtual public TestMapServiceIfFactory {
 public:
  TestMapServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TestMapServiceIf>& iface) : iface_(iface) {}
  virtual ~TestMapServiceIfSingletonFactory() {}

  virtual TestMapServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TestMapServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TestMapServiceIf> iface_;
};

class TestMapServiceNull : virtual public TestMapServiceIf {
 public:
  virtual ~TestMapServiceNull() {}
  void pushData(const int64_t /* reqId */, const std::map<int64_t, std::string> & /* pushData */) {
    return;
  }
};

typedef struct _TestMapService_pushData_args__isset {
  _TestMapService_pushData_args__isset() : reqId(false), pushData(false) {}
  bool reqId :1;
  bool pushData :1;
} _TestMapService_pushData_args__isset;

class TestMapService_pushData_args {
 public:

  TestMapService_pushData_args(const TestMapService_pushData_args&);
  TestMapService_pushData_args& operator=(const TestMapService_pushData_args&);
  TestMapService_pushData_args() : reqId(0) {
  }

  virtual ~TestMapService_pushData_args() throw();
  int64_t reqId;
  std::map<int64_t, std::string>  pushData;

  _TestMapService_pushData_args__isset __isset;

  void __set_reqId(const int64_t val);

  void __set_pushData(const std::map<int64_t, std::string> & val);

  bool operator == (const TestMapService_pushData_args & rhs) const
  {
    if (!(reqId == rhs.reqId))
      return false;
    if (!(pushData == rhs.pushData))
      return false;
    return true;
  }
  bool operator != (const TestMapService_pushData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestMapService_pushData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestMapService_pushData_pargs {
 public:


  virtual ~TestMapService_pushData_pargs() throw();
  const int64_t* reqId;
  const std::map<int64_t, std::string> * pushData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestMapService_pushData_result {
 public:

  TestMapService_pushData_result(const TestMapService_pushData_result&);
  TestMapService_pushData_result& operator=(const TestMapService_pushData_result&);
  TestMapService_pushData_result() {
  }

  virtual ~TestMapService_pushData_result() throw();

  bool operator == (const TestMapService_pushData_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TestMapService_pushData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestMapService_pushData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestMapService_pushData_presult {
 public:


  virtual ~TestMapService_pushData_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TestMapServiceClient : virtual public TestMapServiceIf {
 public:
  TestMapServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestMapServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pushData(const int64_t reqId, const std::map<int64_t, std::string> & pushData);
  void send_pushData(const int64_t reqId, const std::map<int64_t, std::string> & pushData);
  void recv_pushData();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestMapServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TestMapServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TestMapServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_pushData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestMapServiceProcessor(::apache::thrift::stdcxx::shared_ptr<TestMapServiceIf> iface) :
    iface_(iface) {
    processMap_["pushData"] = &TestMapServiceProcessor::process_pushData;
  }

  virtual ~TestMapServiceProcessor() {}
};

class TestMapServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TestMapServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TestMapServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TestMapServiceIfFactory > handlerFactory_;
};

class TestMapServiceMultiface : virtual public TestMapServiceIf {
 public:
  TestMapServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TestMapServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestMapServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TestMapServiceIf> > ifaces_;
  TestMapServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TestMapServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void pushData(const int64_t reqId, const std::map<int64_t, std::string> & pushData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushData(reqId, pushData);
    }
    ifaces_[i]->pushData(reqId, pushData);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TestMapServiceConcurrentClient : virtual public TestMapServiceIf {
 public:
  TestMapServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestMapServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pushData(const int64_t reqId, const std::map<int64_t, std::string> & pushData);
  int32_t send_pushData(const int64_t reqId, const std::map<int64_t, std::string> & pushData);
  void recv_pushData(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
