// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <memory>
#include <map>
#include <iostream>

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/server/TNonblockingServer.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>

#include "gen-cpp/TestMapService.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

class TestMapServiceHandler : virtual public TestMapServiceIf {
public:
    TestMapServiceHandler() = default;

    void pushData(const int64_t reqId, const std::map<int64_t, std::string> & pushData) override {
        std::cout << "reqId: " << reqId << ", pushData.size(): " << pushData.size() << std::endl;
    }
};


const uint32_t kWorkThreadNum = 5;
const uint32_t kIOThreadNum = 2;

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(kWorkThreadNum);
    threadManager->threadFactory(std::make_shared<PosixThreadFactory>());
    threadManager->start();

    std::shared_ptr<TestMapServiceHandler> handler(new TestMapServiceHandler());
    shared_ptr<TProcessor> processor(new StudentServiceProcessor(handler));
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TNonblockingServer server(processor, protocolFactory, port, threadManager);

    server.setNumIOThreads(kIOThreadNum);
    server.serve();
    return 0;
}

