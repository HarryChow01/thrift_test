// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <string>
#include <unordered_map>
#include <mutex>

#include "StudentService.h"


std::unordered_map<int32_t, std::string> gSnoSnameMap = {};
std::mutex gStudentMapMutex;

class StudentServiceHandler : virtual public StudentServiceIf {
public:
    StudentServiceHandler() {
        // Your initialization goes here
    }

    void put(const Student& student) {
        // Your implementation goes here
        std::lock_guard<std::mutex> lock(gStudentMapMutex);
        gSnoSnameMap[student.sno] = student.sname;
    }

    void get(Student& student, const int32_t sno) {
        // Your implementation goes here

        student.sno = sno;
        std::lock_guard<std::mutex> lock(gStudentMapMutex);
        if (gSnoSnameMap.find(sno) != gSnoSnameMap.end()) {
            student.sname = gSnoSnameMap[sno];
        } else {
            student.sname = "";
        }
        student.__isset.sname = true;
    }

};

