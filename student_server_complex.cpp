// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <boost/make_shared.hpp>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TServerSocket.h>

#include <thrift/server/TNonblockingServer.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/concurrency/ThreadManager.h>

#include "student_service_handler.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

const uint32_t kWorkThreadNum = 5;
const uint32_t kIOThreadNum = 2;

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(kWorkThreadNum);
    threadManager->threadFactory(boost::make_shared<PosixThreadFactory>());
    threadManager->start();

    shared_ptr<StudentServiceHandler> handler(new StudentServiceHandler());
    shared_ptr<TProcessor> processor(new StudentServiceProcessor(handler));
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TNonblockingServer server(processor, protocolFactory, port, threadManager);

    server.setNumIOThreads(kIOThreadNum);
    server.serve();
    return 0;
}

